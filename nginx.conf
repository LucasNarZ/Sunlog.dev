worker_processes auto;

events {
    use epoll;
    worker_connections 1000;
}

http {
    server_tokens off;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    client_max_body_size 1M;

    # Redireciona HTTP → HTTPS
    server {
        listen 80;
        server_name sunlog.dev;
        return 301 https://$host$request_uri;
    }

    # Servidor HTTPS
    server {
        listen 443 ssl http2;
        server_name sunlog.dev;

        ssl_certificate /etc/letsencrypt/live/sunlog.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/sunlog.dev/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        limit_req zone=api burst=20 nodelay;

        # Frontend
        location / {
            proxy_pass http://front-end:3000;
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # API
        location /api/ {
            proxy_pass http://api;
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Bloqueia arquivos sensíveis
        location ~ /\.(git|env|htaccess|htpasswd) {
            deny all;
        }
    }

    # Upstream API container
    upstream api {
        server api:3000;
    }
}
